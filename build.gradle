/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // used for bundling dependencies in the output .jar
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id "org.xbib.gradle.plugin.git" version "2.0.0"
    id "pmd"
    id 'jacoco'
    id "org.barfuin.gradle.jacocolog" version "2.0.0"
    id "com.github.spotbugs" version "5.0.9"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
	testImplementation 'org.hamcrest:hamcrest:2.2'

    // Java standard library
    implementation 'com.google.guava:guava:30.1.1-jre'

    // jsoup - HTML parsing library
    implementation 'org.jsoup:jsoup:1.12.1'

    // Apache POI - Excel read/write library
    implementation 'org.apache.poi:poi:5.2.2'
    implementation 'org.apache.poi:poi-ooxml:5.2.2'

    // logging
    implementation 'org.apache.logging.log4j:log4j-to-slf4j:2.18.0'

    // JSON read/write library
    // replaces the JSON-IO library, GSON has much better documentation
    implementation 'com.google.code.gson:gson:2.9.0'
}

application {
    // Define the main class for the application.
    mainClass.set('WebsiteAnalyzer.CLI')
}

jar {
    manifest {
        attributes "Main-Class": "WebsiteAnalyzer.CLI"
    }
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir("$buildDir/reports")
}

tasks.withType(Test) {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    reports{html.required = true}
    ignoreFailures = true
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }

    finalizedBy jacocoTestReport
}


test {
    finalizedBy jacocoTestReport
}

javadoc {
	failOnError false
}

pmd {
    toolVersion = "6.21.0"
    ignoreFailures = true
    consoleOutput = false
    ruleSets = [
        "category/java/bestpractices.xml",
        "category/java/codestyle.xml",
        "category/java/design.xml"
    ]
}

pmdTest.enabled = false

spotbugsMain {
    reportsDir = file("$buildDir/reports")
	ignoreFailures = true
	effort = "max"
	reportLevel = "medium"
	reports {
    	xml.enabled = false
    	html.enabled = true
	}
}

spotbugsTest.enabled = false

task prepReports() {
	dependsOn 'test', 'javadoc', 'jacocoTestReport'
	doLast {
		if(file('gh-pages').exists() == false) {
			mkdir 'build/gh-pages'
		}
		project.delete{delete "$buildDir/gh-pages"}


		exec {
			workingDir = '.'
			commandLine = ["git", "config", "user.email", "\"gmeul.public@gmail.com\""]
		}
		exec {
			workingDir = '.'
			commandLine = ["git", "config", "user.name", "\"Graham Meulendyks\""]
		}

		def git = git.clone{dir = "$buildDir/gh-pages"
		uri = 'git@github.com:GMeulendyks/website-analyzer.git'
		bare = false
		refToCheckout = 'gh-pages'}
		git.checkout{branch = 'gh-pages'}
		def rmgit = git.open{dir = "$buildDir/gh-pages" + "/.git"}
		rmgit.remove{patterns = ['reports/']}
		rmgit.remove{patterns = ['docs/']}
		rmgit.close()
		git.close()
	}
}

task reports() {
	dependsOn 'prepReports'
	doLast {
		ant.copy(todir:'build/gh-pages/docs'){
			fileset(dir: 'build/docs')
		}

		ant.copy (todir:'build/gh-pages/reports'){
			fileset(dir: 'build/reports')
		}
	}
}

task deployReports(dependsOn: 'reports') {
	doLast{
		def git = git.open{dir = "$buildDir/gh-pages" + "/.git"}
		git.add(update: false, patterns: ['reports/'])
		git.add(update: true, patterns: ['reports/'])
		git.add(update: false, patterns: ['docs/'])
		git.add(update: true, patterns: ['docs/'])

		git.commit{message = "commit reports"}
		//git.push{}
		git.close()
	}

	task copyCompiledJAR(type: Copy) {
		// move the compiled jar file to the directory to be zipped
		from "build/libs/WebsiteAnalyzer-all.jar"
		into "src/main/resources/scripts/"

		// rename the jar file to the appropriate title
		rename 'WebsiteAnalyzer-all.jar', "WebsiteAnalysis.jar"
	}

	task generateFileZIP(type: Zip) {
		dependsOn 'copyCompiledJAR'

		// ZIP the desired directory
		from 'src/main/resources/scripts/'
		include '*'

		// save the archive to the root of the project directory
		archiveName 'WebsiteAnalysis.zip'
		destinationDir(file('.'))
	}
}
